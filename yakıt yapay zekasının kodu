!unzip ./converted_keras.zip

import PIL
PIL.__version__

!pip install Pillow==9.1.0

from google.colab import files
from PIL import Image, ImageOps  # pillow yerine PIL kütüphanesinden içe aktarılıyor

path = files.upload()
path = list(path.keys())[0]
image=Image.open(path)

from tensorflow.keras.layers import DepthwiseConv2D

def custom_depthwise_conv2d(**kwargs):
    kwargs.pop("groups", None)  # 'groups' parametresini kaldır
    return DepthwiseConv2D(**kwargs)

model = load_model("keras_model.h5", custom_objects={"DepthwiseConv2D": custom_depthwise_conv2d})
# Anlaşılırlık için bilimsel gösterimin devre dışı bırakılması
np.set_printoptions(suppress=True)


# Etiketler yükleniyor
class_names = open("/content/labels.txt", "r").readlines()



# Keras modelini beslemek için doğru şekle sahip bir dizi oluşturma
# Diziye koyabileceğiniz 'uzunluk' veya görüntü sayısı
# Şekil (shape) tuple'ındaki ilk pozisyon tarafından belirlenir (bu örnekte: 1)
data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)

# Bunu resminizin yolu ile değiştirin
image = image.convert("RGB")

# Görüntüyü en az 224x224 piksel olacak şekilde yeniden boyutlandırma ve ardından merkezden kırpma
size = (224, 224)
image = ImageOps.fit(image, size, Image.Resampling.LANCZOS)

# Görüntüyü bir NumPy dizisine dönüştürme
image_array = np.asarray(image)

# Görüntüyü normalleştirme
normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1

# Görüntüyü diziye yükleme
data[0] = normalized_image_array

# Modelin tahmin edilmesi
prediction = model.predict(data)
index = np.argmax(prediction)
class_name = class_names[index]
confidence_score = prediction[0][index]

# Tahmin ve güven skorunu yazdır.
print("Sınıf:", class_name[2:], end="")
print("Güven Skoru:", confidence_score)

from tensorflow.keras.models import load_model
from tensorflow.keras.layers import DepthwiseConv2D
import numpy as np
from PIL import Image, ImageOps

# 'groups' parametresini kaldırarak DepthwiseConv2D yükleme fonksiyonu
def custom_depthwise_conv2d(**kwargs):
    kwargs.pop("groups", None)
    return DepthwiseConv2D(**kwargs)

# Modeli yükle
model = load_model("keras_model.h5", custom_objects={"DepthwiseConv2D": custom_depthwise_conv2d})

# Load the labels
class_names = [line.strip() for line in open("/content/labels.txt", "r").readlines()]

# Resmi oku ve ön işle
image = Image.open("/content/güneş1.jpeg").convert("RGB")
image = ImageOps.fit(image, (224, 224), Image.Resampling.LANCZOS)
image_array = np.asarray(image)
normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1
data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)
data[0] = normalized_image_array

# Tahmin yap
prediction = model.predict(data)
index = np.argmax(prediction)
class_name = class_names[index]  # Doğrudan etiketi al
confidence_score = prediction[0][index]

# Tahmini ekrana yazdır
print("Class:", class_name)
print("Confidence Score:", confidence_score)

# Öneri verme
if "İyi Yakıt" in class_name:
  print("iyi yakıt bu")
  print("Bu tarz yakıtları daha çok kullan")
elif "Kötü Yakıt" in class_name:
    print("kötü yakıt bu")
    print("Bu yakıtların kullanımını azalt! >:()")
else:
    print("⚠ Model, iklim değişikliği ile ilgili bir sınıf belirleyemedi.")

import tensorflow as tf

!pip install tensorflow
